name: K2CI

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  build-kernel-and-test:
    runs-on: ubuntu-latest

    env:
      APP_BIN: run_tests

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # install packege
    - name: Install build deps for kernel & QEMU
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential bc bison flex libssl-dev libelf-dev \
          libncurses-dev xz-utils curl jq \
          qemu-system-x86 qemu-utils \
          python3 python3-pip busybox
        sudo pip3 install --upgrade virtme

    - name: Fetch latest stable kernel version
      id: kernel
      run: |
        # LATEST=$(curl -s https://www.kernel.org/releases.json | \
        #          jq -r '.releases[] | select(.is_mainline==false and .is_stable==true) | .version' | head -n1)

        ver=$(curl -s https://www.kernel.org/releases.json | jq -r '.latest_stable.version')

        echo "KVER=$ver"           >> "$GITHUB_OUTPUT"
        echo "KERNEL_DIR=linux-$ver" >> "$GITHUB_OUTPUT"

    - name: Download kernel source
      run: |
        MAJOR=$(echo "${{ steps.kernel.outputs.KVER }}" | cut -d. -f1)
        wget https://cdn.kernel.org/pub/linux/kernel/v${MAJOR}.x/linux-${{ steps.kernel.outputs.KVER }}.tar.xz
        tar -xf linux-${{ steps.kernel.outputs.KVER }}.tar.xz

    # ------------------------------------
    # 3) kernel ソース & ビルド成果物キャッシュ
    # ------------------------------------
    - name: Restore kernel build from cache (if any)
      id: cache-kernel
      uses: actions/cache@v4
      with:
        path: ${{ steps.kernel.outputs.KERNEL_DIR }}
        key: linux-${{ steps.kernel.outputs.KVER }}-${{ runner.os }}-kvmguest

    # ------------------------------------
    # 4) ダウンロード & 展開 (キャッシュ miss 時のみ)
    # ------------------------------------
    - name: Download kernel source
      if: steps.cache-kernel.outputs.cache-hit != 'true'
      run: |
        maj=$(echo "${{ steps.kernel.outputs.KVER }}" | cut -d. -f1)
        wget -q https://cdn.kernel.org/pub/linux/kernel/v${maj}.x/linux-${{ steps.kernel.outputs.KVER }}.tar.xz
        tar -xf linux-${{ steps.kernel.outputs.KVER }}.tar.xz

    # ------------------------------------
    # 5) コンフィグ＋ビルド (miss 時のみ)
    # ------------------------------------
    - name: Configure and build kernel
      if: steps.cache-kernel.outputs.cache-hit != 'true'
      working-directory: ${{ steps.kernel.outputs.KERNEL_DIR }}
      run: |
        make defconfig
        make kvm_guest.config      # kvmconfig でも可
        make -j"$(nproc)"

    # ------------------------------------
    # 6) bzImage パスを環境変数へ
    #    (hit/miss どちらでも必要)
    # ------------------------------------
    - name: Export KERNEL_IMG path
      run: |
        echo "KERNEL_IMG=${{ github.workspace }}/${{ steps.kernel.outputs.KERNEL_DIR }}/arch/x86/boot/bzImage" >> "$GITHUB_ENV"

    #------------------------------------
    # 7) Rust プロジェクトを Release ビルド
    #------------------------------------
    - name: Set up Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true

    - name: Cargo build
      run: cargo build -p tokio --bin run_tests

    #------------------------------------
    # 8) QEMU (virtme-run) で kernel をブートし Rust バイナリを実行
    #------------------------------------
    - name: Run integration test on fresh kernel
      run: |
        virtme-run \
          -a x86_64 \
          --kdir linux-${{ steps.kernel.outputs.KVER }} \
          --mods=auto \
          --memory 1024M \
          --pwd="$PWD" \
          --script-sh "./target/debug/${APP_BIN} && echo 'TEST-OK'" \
          --qemu-arg -nographic
