name: Kernel CIs

on:
  workflow_call:
    inputs:
      kernel_version:
        description: 'Version of the Linux kernel to build'
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      KERNEL_VERSION: ${{ inputs.kernel_version }}
    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential bison flex libssl-dev libelf-dev \
            qemu-system-x86 busybox-static cpio xz-utils wget

      - name: Cache Linux source
        id: cache-kernel
        uses: actions/cache@v4
        with:
          path: linux-${{ env.KERNEL_VERSION }}
          key: kernel-${{ env.KERNEL_VERSION }}

      - name: Download & build Linux kernel
        if: steps.cache-kernel.outputs.cache-hit != 'true'
        run: |
          MAJOR=${KERNEL_VERSION%%.*}
          wget https://cdn.kernel.org/pub/linux/kernel/v${MAJOR}.x/linux-${KERNEL_VERSION}.tar.xz
          tar xf linux-${KERNEL_VERSION}.tar.xz
          cd linux-${KERNEL_VERSION}
          make defconfig
          make -j$(nproc)

      - name: Run Rust tests under musl
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-hack
      - run: |
          rustup target add x86_64-unknown-linux-musl
          RUSTFLAGS="--cfg tokio_uring" \
            cargo hack test -p tokio --features full \
            --target x86_64-unknown-linux-musl --test 'fs*'

      - name: Prepare initramfs + tests
        run: |
          set -e
          rm -rf initramfs
          mkdir -p initramfs/{bin,bin/tests,sbin,proc,sys,tmp}
          # chmod 1777 initramfs/tmp

          # copy Rust test binaries
          # for bin in target/x86_64-unknown-linux-musl/debug/deps/fs_*; do
          #   cp "$bin" initramfs/bin/tests
          # done

          # copy only executable test binaries, skip *.d files
          for bin in target/x86_64-unknown-linux-musl/debug/deps/fs_*; do
            if [[ ! "$bin" =~ \.d$ ]]; then
              cp "$bin" initramfs/bin/tests
            fi
          done

          # add BusyBox & symlinks
          cp /usr/bin/busybox initramfs/bin/
          for cmd in sh mount; do ln -sf busybox initramfs/bin/$cmd; done
          ln -sf ../bin/busybox initramfs/sbin/poweroff

          # generate init script
          cat > initramfs/init << 'EOF'
          #!/bin/sh
          set -e
          mkdir -p /dev && mknod /dev/port c 1 4
          mount -t proc proc /proc
          mount -t sysfs sysfs /sys
          mkdir -p /tmp && mount -t tmpfs -o mode=1777 tmpfs /tmp
          exit_code=0
          for f in /bin/tests/*; do RUST_BACKTRACE=1 "$f" || exit_code=1; done
          [ $exit_code -eq 0 ] || printf '\x01' \
            | dd of=/dev/port bs=1 seek=244 count=1 conv=notrunc 2>/dev/null
          /sbin/poweroff -f
          EOF
          chmod +x initramfs/init

          # pack into a CPIO archive
          (cd initramfs && find . -print0 \
            | cpio --null -ov --format=newc | gzip -9 > ../initramfs.cpio.gz)

      - name: Run tests in QEMU
        run: |
          qemu-system-x86_64 \
            -device isa-debug-exit,iobase=0xf4,iosize=0x04 \
            -kernel linux-${{ env.KERNEL_VERSION }}/arch/x86/boot/bzImage \
            -initrd initramfs.cpio.gz \
            -append "console=ttyS0 rootfstype=ramfs panic=1" \
            -nographic -no-reboot -m 1024 -action panic=exit-failure

          if [ $? -ne 0 ]; then
            echo "tests failed (QEMU exited abnormally)"
            exit 1
          else
            echo "all tests passed"
          fi
